x=1
x-1
x = x-1
x^2
kmeans
library(lpSolveAPI)
library('lpSolveAPI')
library('RNeo4j')
readLoad <- function(path) {
query = paste(readLines(path), collapse="\n")
return (query)
}
buildDataBase = function() {
#  graph = startGraph("http://dev.acuo.com:7474/db/data/")
#  graph = startGraph("http://qa.acuo.com:7474/db/data/")
graph = startGraph("http://localhost:7474/db/data/")
clear(graph,input=FALSE)
load.name <- c('/cypher/firms.load',
'/cypher/workingZones.load',
'/cypher/legalentities.load',
'/cypher/clearingHouses.load',
'/cypher/fcms.load',
'/cypher/tradingAccounts.load',
'/cypher/bilateralMasterAgreements.load',
'/cypher/bilateralAgreements.load',
# '/cypher/coveredTransactions.load',
'/cypher/valuationAgent.load',
'/cypher/clearedAgreements.load',
'/cypher/ratingScores.load',
'/cypher/assetCategories.load',
#                 '/cypher/custodians.load',
'/cypher/custodianAccounts.load',
'/cypher/counterpartCustodianAccounts.load',
'/cypher/custodianAssets.load',
'/cypher/buildEligibility.load',
'/cypher/eligibleCurrencies.load',
'/cypher/csaFitchFXAR.load',
'/cypher/csaFitchSecAR.load',
'/cypher/csaMoodyVP.load',
#     '/cypher/mstatements.load',
#    '/cypher/initmcexp.load',
#    '/cypher/initmc.load',
#    '/cypher/infopres.load',
#                 '/cypher/reconEverything.load',
'/cypher/settings.load',
'/cypher/assetTransfer.load',
'/cypher/currencies.load',
'/cypher/portfolios.load',
'/cypher/books.load')
load.preurl<-'https://raw.githubusercontent.com/AcuoFS/acuo-data/develop/graph-data'
load.url<-paste(load.preurl,sep='',load.name)
load.query<-list()
for(i in 1:length(load.name)) {
load.query[i] <- readLoad(load.url[i])
load.query[i] <- gsub('%dataImportLink%', load.preurl, load.query[i])
print(load.name[i])
cypher(graph,load.query[[i]])
}
return(graph)
}
graph <- buildDataBase()
source("src/generalFunctions.R")
source("src/allocationFunction.R")
source("src/coreAlgo.R")
source("src/callLpSolve.R")
library("testthat")
library("XLConnect")
library('RUnit')
setwd("E://ACUO/projects/acuo-allocation/test/v0.0.3")
test.suite = defineTestSuite("example",
dirs = file.path("opportunityCost"),
testFileRegexp = "externalScenario1NoncashSuffTests.R")
test.result <- runTestSuite(test.suite)
ExternalCostTestVisual("NoncashS1Suff","noncash")
source("opportunityCost/externalCostVisual.R")
ExternalCostTestVisual("NoncashS1Suff","noncash")
source("opportunityCost/externalCostVisual.R")
ExternalCostTestVisual("NoncashS1Suff","noncash")
resultPref1
source("opportunityCost/externalCostVisual.R")
ExternalCostTestVisual("NoncashS1Suff","noncash")
ExternalCostTestVisual("NoncashS1Suff","noncash")
load("E:/ACUO/projects/acuo-allocation/test/v0.0.3/opportunityCost/Result/callNumber10AssetNumberS20M20L10NoncashS1Pref1ResultList.RData")
source("opportunityCost/externalCostVisual.R")
ExternalCostTestVisual("NoncashS1Suff","noncash")
ExternalCostTestVisual("NoncashS1Suff","noncash")
source("opportunityCost/externalCostVisual.R")
ExternalCostTestVisual("NoncashS1Suff","noncash")
library('RUnit')
setwd("E://ACUO/projects/acuo-allocation/test/v0.0.3")
test.suite = defineTestSuite("example",
dirs = file.path("opportunityCost"),
testFileRegexp = "externalScenario1NoncashTests.R")
test.result <- runTestSuite(test.suite)
ExternalCostTestVisual("NoncashS1","cash")
ExternalCostTestVisual("NoncashS1","noncash")
0.14*360
0.14*2.3*100
ExternalCostTestVisual("NoncashS1","noncash")
0.14*125
load("E:/ACUO/projects/acuo-allocation/test/v0.0.3/opportunityCost/Result/floorPositiveRepoCashS2Pref1ResultList.RData")
resultList
load("E:/ACUO/projects/acuo-allocation/test/v0.0.3/opportunityCost/Result/callNumber10AssetNumberS20M20L10NoncashS1Pref1ResultList.RData")
resultList
resultList[[1]]
resultList[[1]]$resultAnalysis
load("E:/ACUO/projects/acuo-allocation/test/v0.0.3/opportunityCost/Result/callNumber10AssetNumberS20M20L10NoncashS1ResultList.RData")
resultList[[1]]$resultAnalysis
View(resource_df)
resultList[[1]]$callOutput
library('RUnit')
setwd("E://ACUO/projects/acuo-allocation/test/v0.0.3")
setwd("E://ACUO/projects/acuo-allocation/test/v0.0.3/opportunityCost/")
#### Sources Start #########
setwd("E:/ACUO/projects/acuo-allocation/test/v0.0.3/")
source("src/generalFunctions.R")
library("XLConnect")
#### Sources END ###########
callInfoPath <- "testCashExternal/callInfo.xlsx"
assetInfoPath <- "testOriginalData/assetInfo.xlsx"
availAssetPath <- "testCashExternal/availAsset.xlsx"
externalCostPath <- "testCashExternal/externalCost.xlsx"
opportunityCostPath <- "opportunityCost/opportunityCost.xlsx"
opportunityCostCashPath <- "opportunityCost/opportunityCostCash.xlsx"
callInfoWorkbook <- loadWorkbook(callInfoPath)
assetInfoWorkbook <- loadWorkbook(assetInfoPath)
availAssetWorkbook <- loadWorkbook(availAssetPath)
externalCostWorkbook <- loadWorkbook(externalCostPath)
opportunityCostWorkbook <- loadWorkbook(opportunityCostPath)
opportunityCostCashWorkbook <- loadWorkbook(opportunityCostCashPath)
#### Input Prepare Start ###########
inputLimit_vec <- c(7,7,7,4)
timeLimit <- 10
callOrderMethod <- 3
minMoveValue <- 0
algoVersion <- 2
pref_vec <- c(5,5)
fungible <- FALSE
# read data
usdCallInfo_df <- readWorksheet(callInfoWorkbook,sheet ="USD",startRow = 1,endRow = 200,header=TRUE)
assetInfo_df <- readWorksheet(assetInfoWorkbook,sheet ="assets",header=TRUE)
usdAvailAsset_df <- readWorksheet(availAssetWorkbook,sheet ="USD",header=TRUE)
externalCost_df <- readWorksheet(externalCostWorkbook,sheet="Sheet1",header=TRUE)
opportunityCost_df <- readWorksheet(opportunityCostWorkbook,sheet="Sheet1",header=TRUE)
opportunityCostCash_df <- readWorksheet(opportunityCostCashWorkbook,sheet="Sheet1",header=TRUE)
# construct the resource id
assetCustacId_vec <- PasteResource(usdAvailAsset_df$assetId,usdAvailAsset_df$CustodianAccount)
usdAvailAsset_df$assetCustacId <- assetCustacId_vec
## TWO assets amount combination ##
# 20 small, 20 medium, 10 large(6VM)
tempAvailAsset_df <- usdAvailAsset_df
tempAvailAsset_df$quantity[c(1:6,8:13,15:18)] <- usdAvailAsset_df$quantity[c(1:6,8:13,15:18)]*10
tempAvailAsset_df$quantity[c(19:28)] <- usdAvailAsset_df$quantity[c(19:28)]/10
availAssetS20M20L10_df <- tempAvailAsset_df
# 10 small, 35 medium, 5 large(4VM)
tempAvailAsset_df <- usdAvailAsset_df
tempAvailAsset_df$quantity[c(1:4,8:11,15)] <- usdAvailAsset_df$quantity[c(1:4,8:11,15)]*10
tempAvailAsset_df$quantity[c(19:38)] <- usdAvailAsset_df$quantity[c(19:38)]/10
availAssetS10M35L5_df <- tempAvailAsset_df
rm("tempAvailAsset_df")
# names
assetScenarios <- c("S20M20L10","S10M35L5")
# call number = 10, asset number = 50
callInfo_df <- usdCallInfo_df[c(61:66,101:104),] # callAmount = 50000
msNum <- length(unique(callInfo_df$marginStatement))
operLimitMs_vec <- rep(2,msNum)
operLimit<- sum(operLimitMs_vec)
for(i in 1:length(assetScenarios)){
availAsset_df <- usdAvailAsset_df[-(1:length(usdAvailAsset_df$callId)),]
thisAvailAsset_df <- get(paste("availAsset",assetScenarios[i],"_df",sep=""))
for(m in 1:length(callInfo_df$id)){
tempAvailAsset_df <- thisAvailAsset_df[which(thisAvailAsset_df$callType==callInfo_df$marginType[m]),]
tempAvailAsset_df$callId <- callInfo_df$id[m]
# assign the external cost
cashOrNoncash_vec <- assetInfo_df$cashOrNoncash[match(tempAvailAsset_df$assetId,assetInfo_df$id)]
tempAvailAsset_df$cashOrNoncash <- cashOrNoncash_vec # for simplicity of cost setting
tempAvailAsset_df$Cpty <- callInfo_df$Cpty[match(tempAvailAsset_df$callId,callInfo_df$id)] # for simplicity of cost setting
cptyIdx <- which(callInfo_df$Cpty[m]==externalCost_df$Cpty)
tempAvailAsset_df$externalCost <- externalCost_df[cptyIdx,]$externalCost[match(cashOrNoncash_vec,externalCost_df$cashOrNoncash[cptyIdx])]
# assign the opportunity cost to noncash
# opportunity cost of noncash: negative repo rate
# opportunity cost of cash: overnight depo rate
noncashIdx <- which(tempAvailAsset_df$cashOrNoncash=="noncash")
availCountryCodeIdx_vec <- assetInfo_df$countryCode[match(tempAvailAsset_df$assetId[noncashIdx],assetInfo_df$id)]
tempAvailAsset_df$opptCost[noncashIdx] <- -opportunityCost_df$repo[match(availCountryCodeIdx_vec,opportunityCost_df$countryCode)]
# assign the opportunity cost to cash
cashIdx <- which(tempAvailAsset_df$cashOrNoncash=="cash")
availCurrencyIdx_vec <- match(tempAvailAsset_df$currency[cashIdx], opportunityCostCash_df$currency)
tempAvailAsset_df$opptCost[cashIdx] <- opportunityCostCash_df$OND[availCurrencyIdx_vec]
# combine
availAsset_df <- rbind(availAsset_df,tempAvailAsset_df)
}
resource_vec <- unique(availAsset_df$assetCustacId)
resource_df <- ResourceInfo(resource_vec,assetInfo_df,availAsset_df)
availAsset_df <- cbind(AvailAsset(availAsset_df),cashOrNoncash=availAsset_df$cashOrNoncash,Cpty=availAsset_df$Cpty)
rm(tempAvailAsset_df)
rm(thisAvailAsset_df)
save.image(paste("opportunityCost/RData/callNumber10AssetNumber",assetScenarios[i],".RData",sep=""))
}
load("E:/ACUO/projects/acuo-allocation/test/v0.0.3/opportunityCost/RData/callNumber10AssetNumberS20M20L10.RData")
View(assetInfo_df)
View(resource_df)
View(assetInfo_df)
View(availAsset_df)
library('RUnit')
setwd("E://ACUO/projects/acuo-allocation/test/v0.0.3/opportunityCost/")
source("externalScenario1CashTests.R")
source("externalScenario1CashTests.R")
setwd("E://ACUO/projects/acuo-allocation/test/v0.0.3/opportunityCost/")
source("externalScenario1CashTests.R")
testExternalCashScenario1Data1Pref1()
testExternalCashScenario1Data1Pref2()
testExternalCashScenario1Data1Pref3()
testExternalCashScenario1Data1Pref4()
testExternalCashScenario1Data1Pref5()
0.96*360
0.396*360
load("E:/ACUO/projects/acuo-allocation/test/v0.0.3/opportunityCost/Result/callNumber10AssetNumberS20M20L10CashS1SuffPref1ResultList.RData")
resultList[[1]]$resultAnalysis
resultList[[1]]$callOutput
# generate results
library('RUnit')
setwd("E://ACUO/projects/acuo-allocation/test/v0.0.3/opportunityCost/")
source("externalScenario1CashTests.R")
source("externalScenario1CashTests.R")
library('RUnit')
setwd("E://ACUO/projects/acuo-allocation/test/v0.0.3/")
source("opportunityCost/externalScenario1CashTests.R")
testExternalCashScenario1Data1Pref1()
library('RUnit')
setwd("E://ACUO/projects/acuo-allocation/test/v0.0.3/")
source("opportunityCost/externalScenario1CashTests.R")
testExternalCashScenario1Data1Pref1()
testExternalCashScenario1Data1Pref1()
pref4
View(CostDefinitionActualCost)
View(CostDefinitionActualCost)
View(availAsset_df)
View(worksheet)
resultList[[i]]
output
loadFile
paste(loadFile,sheetName,pref,"ResultList.RData",sep='')
# generate results
library('RUnit')
setwd("E://ACUO/projects/acuo-allocation/test/v0.0.3/")
source("opportunityCost/externalScenario1CashTests.R")
testExternalCashScenario1Data1Pref1()
load("E:/ACUO/projects/acuo-allocation/test/v0.0.3/opportunityCost/Result/callNumber10AssetNumberS20M20L10CashS1Pref1ResultList.RData")
resultList[[1]]
# generate results
library('RUnit')
setwd("E://ACUO/projects/acuo-allocation/test/v0.0.3/")
source("opportunityCost/externalScenario1CashTests.R")
testExternalCashScenario1Data1Pref2()
testExternalCashScenario1Data1Pref3()
pref3
testExternalCashScenario1Data1Pref3()
testExternalCashScenario1Data1Pref3()
